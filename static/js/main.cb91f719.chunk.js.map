{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["createNode","vert","x","y","toString","TableRow","rowNum","tableRow","console","log","map","e","i","HeaderTableRow","cells","Array","push","GraphTable","graph","nodes","length","App","useState","numNodes","setNumNodes","prob","setProb","nn","Number","pp","g","edgeProb","j","Math","random","w","round","createRndGraph","max","cost","mst","treeIds","n","weight","source","target","sort","a","b","oldTreeId","newTreeId","edges","kruskall","viz","vert1","vert2","elements","createGraphViz","kSet","Set","numEdges","filter","group","forEach","el","data","id","has","selected","cy","remove","add","stylesheet","selector","style","width","height","border","type","value","onChange","min","step","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb91f719.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\n\nconst createRndGraph = (vert, edgeProb) => {\n  console.log(vert, edgeProb);\n const g = new Array(vert);\n\n for (let i = 0; i < vert; i++) {\n  g[i] = new Array(vert);\n }\n\n for (let i = 0; i < vert; i++) {\n   console.log(i, g);\n   for (let j = i + 1; j < vert; j++) {\n     const edge = Number(Math.random() < edgeProb);\n     if (edge && j > i) {\n      const w = Math.round(Math.random() * 20);\n      g[i][j] = w;\n      g[j][i] = w;\n     } else {\n      g[i][j] = 0;\n      g[j][i] = 0;\n     }\n   }\n   g[i][i] = 0;\n }\n\n return g;\n}\n\nconst createNode = (vert, x, y) => ({\n  \"data\": {\n    \"id\": `n${vert}`,\n    \"weight\": 53,\n    \"label\": vert.toString()\n  },\n  \"position\": {\n    \"x\": x,\n    \"y\": y\n  },\n  \"group\": \"nodes\",\n})\n\nconst createEdge = (vert1, vert2, weight) => ({\n  \"data\": {\n    \"id\": `en${vert1}n${vert2}`,\n    \"weight\": weight,\n    \"mycust\": weight,\n    \"source\": `n${vert1}`,\n    \"target\": `n${vert2}`,\n  },\n  \"selected\": false,\n  \"selectable\": false,\n  \"group\": \"edges\",\n})\n\n\nconst createGraphViz = (g) => {\n  const elements = [];\n  const vert = g.length;\n  \n  for (let i = 0; i < vert; i++) {\n    elements.push(createNode(i, Math.random() * 500, Math.random() * 500));\n  }\n\n  for (let i = 0; i < vert; i++) {\n    for (let j = i+1; j < vert; j++) {\n      if (g[i][j]) {\n        elements.push(createEdge(i, j, g[i][j]));\n      }\n    }\n  }\n\n  return elements;\n}\n\nconst TableRow = ({rowNum, tableRow}) => {\n  console.log({rowNum, tableRow});\n  return (\n    <tr>\n      <th key={0}>n{rowNum}</th>\n      {tableRow.map((e, i) => <td key={i+1}>{e}</td>)}\n    </tr>\n  )\n}\n\nconst HeaderTableRow = ({ vert }) => {\n  const cells = new Array(vert);\n  for (let i = 0; i< vert; i++) {\n    cells.push(<th key={i+1}>n{i}</th>);\n  }\n\n  return (\n    <tr>\n      <th key={0}></th>\n      {cells}\n    </tr>\n  )\n}\n\nconst GraphTable = ({graph}) => {\n  const nodes = new Array(graph.length);\n  \n  for (let i = 0; i < graph.length; i++) {\n    nodes.push(i);\n  }\n\n  console.log('nodes', nodes)\n\n  return (\n    <table>\n      <thead>\n        <HeaderTableRow vert={graph.length} />\n      </thead>\n      <tbody>\n        {\n          nodes.map((i) => <TableRow key={i} rowNum={i} tableRow={graph[i]} />)\n        }\n      </tbody>\n    </table>\n  )\n}\n\nconst kruskall = (graph) => {\n  let g = []; \n  let cost = 0;\n  let mst = []; // minimum spanning tree минимальное остовное дерево\n  let treeIds = [];\n\n  const n = graph.length;\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      if (graph[i][j]) {\n        g.push({ \n          weight: graph[i][j],\n          source: i,\n          target: j,\n        });\n      }\n    }\n  }\n\n  g.sort((a, b) => a.weight - b.weight);\n  \n  for (let i = 0; i < n; i++){\n    treeIds[i] = i;\n  }\n    \n  for (let i = 0; i < g.length; i++)\n  {\n    const { source, target, weight } = g[i];\n    if (treeIds[source] !== treeIds[target])\n    {\n      cost += weight;\n      mst.push(`en${source}n${target}`);\n      let oldTreeId = treeIds[source];\n      let newTreeId = treeIds[target];\n      for (let j = 0; j < n; j++) {\n        if (treeIds[j] === oldTreeId) {\n          treeIds[j] = newTreeId;\n        }\n      }\n    }\n  }\n\n  return { cost, edges: mst }\n}\n\nfunction App() {\n\n  const [ numNodes, setNumNodes ] = useState(5);\n  const [ prob, setProb ] = useState(50);\n\n  const nn = Number(numNodes);\n  const pp = Number(prob);\n\n  const g = createRndGraph(Math.max(nn, 2), pp > 20 && pp < 100 ? pp / 100 : 0.5);\n\n  const { edges, cost } = kruskall(g);\n  const viz = createGraphViz(g);\n\n  const kSet = new Set(edges);\n  const numEdges = viz.filter(e => e.group === 'edges').length;\n\n  viz.forEach((el) => {\n    console.log(el.data.id);\n    if (kSet.has(el.data.id)) {\n      el.selected = true\n    }\n  });\n\n  console.log(viz);\n  return (\n    <>\n    <h1>Алгоритм крускалла</h1>\n    <CytoscapeComponent cy={ cy => {cy.elements().remove(); cy.add( viz );}} elements={[]} stylesheet={ [\n        {\n          selector: 'node',\n          style: {\n            'height': 20,\n            'width': 20,\n            'label': 'data(id)',\n            'background-color': '#18e018'\n          }\n        },\n\n        {\n          selector: 'edge',\n          style: {\n            'curve-style': 'haystack',\n            'haystack-radius': 0,\n            'width': 5,\n            'label': 'data(weight)',\n            'opacity': 0.7,\n          }\n        }\n      ]} style={ { width: '600px', height: '600px', border: '1px solid black' } } />\n    <div>\n      <input type='number' value={numNodes} onChange={e => e.target.value >= 2 && setNumNodes(e.target.value)} />\n      <input type='range' min={20} max={100} step={5} value={prob} onChange={e => setProb(e.target.value)} />\n      <GraphTable graph={g} />\n      <p>Минимальный остов: {cost}</p>\n      <p>Количество вершин: {nn}</p>\n      <p>Количество связей: {numEdges}</p>\n      <p>Количество связей в остове: {edges.length}</p>\n      <p>Вершины  входящие в остов: {edges.sort().join(',')}</p>\n      <p>Вершины  входящие в остов: { viz.filter(e => e.group === 'edges').map(e => e.data.id).sort().join(',')}</p>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}